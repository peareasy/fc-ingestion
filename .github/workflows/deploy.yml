name: Deploy FC Ingestion

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: "20"

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Run tests
        run: npm run test

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS
        run: npm run deploy
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Check CloudFormation stack status
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name FcIngestionStack \
            --query 'Stacks[0].StackStatus' \
            --output text)

          echo "CloudFormation Stack Status: $STACK_STATUS"

          # Verify stack is in a successful state
          if [[ "$STACK_STATUS" != "CREATE_COMPLETE" && "$STACK_STATUS" != "UPDATE_COMPLETE" ]]; then
            echo "❌ Stack is not in a successful state (status: $STACK_STATUS)"
            exit 1
          fi

          # Get stack outputs to verify resources
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name FcIngestionStack \
            --query 'Stacks[0].Outputs' \
            --output json)

          # Verify all expected outputs exist
          SERVICE_NAME=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="ServiceName") | .OutputValue')
          QUEUE_URL=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="QueueUrl") | .OutputValue')
          S3_BUCKET=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="S3BucketName") | .OutputValue')

          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" = "null" ]; then
            echo "❌ ServiceName output not found"
            exit 1
          fi

          if [ -z "$QUEUE_URL" ] || [ "$QUEUE_URL" = "null" ]; then
            echo "❌ QueueUrl output not found"
            exit 1
          fi

          if [ -z "$S3_BUCKET" ] || [ "$S3_BUCKET" = "null" ]; then
            echo "❌ S3BucketName output not found"
            exit 1
          fi

          echo "✅ Deployment verified successfully!"
          echo "Stack Status: $STACK_STATUS"
          echo "ECS Service: $SERVICE_NAME"
          echo "SQS Queue: $QUEUE_URL"
          echo "S3 Bucket: $S3_BUCKET"
